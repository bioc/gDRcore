df_
set_nested_identifiers(df_)
devtools::document()
set_nested_identifiers(df_)
devtools::load_all("~/git/gDRutils/gDRutils")
set_nested_identifiers(df_)
packageVersion("shiny")
enquo0
se
se
SE
rowData(SE)
data_model(rowData(SE))
data_model(as.data.frame(rowData(SE)))
SE
assay(SE, "Normalized")
assay(SE, "Normalized")[1,1]
assay(SE, "Normalized")
assay(SE, "Normalized")[[1]]
se = SE
assayNames(se)
tail(assayNames(se), 1)
checkmate::assert_class(se, "SummarizedExperiment")
se[[1]]
assayName = tail(SummarizedExperiment::assayNames(se), 1)
assay(SE, assayName)[[1]]
assayName = "Averaged"
assay(SE, assayName)[[1]]
names(assay(SE, assayName)[[1]])
intersect(unlist(gDRutils::get_env_identifiers(c("concentration", "concentration2"),
simplify = FALSE)),
names(assay(SE, assayName)[[1]]))
devtools::document()
source("~/git/gDRcore/gDRcore/R/utils.R")
devtools::document()
get_nested_identifiers(df_)
series_identifiers <- get_SE_nested_identifiers(se, averaged_assay)
\se\
se
get_SE_nested_identifiers(se, averaged_assay)
averaged_assay
averaged_assay = "Averaged"
get_SE_nested_identifiers(se, averaged_assay)
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
readout = "ReadoutValue"
nested_identifiers
nested_identifiersnested_identifiers
nested_identifiers
nested_identifiers = NULL
control_mean_fxn = function(x) {
mean(x, trim = 0.25)
}
nested_confounders = gDRutils::get_identifier("barcode")
gDRutils::get_env_identifier("barcode")
gDRutils::get_env_identifiers("barcode")
nested_confounders = gDRutils::get_env_identifiers("barcode")
override_untrt_controls = NULL
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
nested_identifiers
nested_identifiers
devtools::load_all()
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
devtools::load_all()
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
# Assertions:
stopifnot(any(inherits(df_, "data.frame"), inherits(df_, "DataFrame")))
checkmate::assert_string(readout)
checkmate::assert_character(nested_identifiers, null.ok = TRUE)
nested_identifiers
# Assertions:
stopifnot(any(inherits(df_, "data.frame"), inherits(df_, "DataFrame")))
checkmate::assert_string(readout)
checkmate::assert_character(nested_identifiers, null.ok = TRUE)
checkmate::assert_character(nested_confounders, null.ok = TRUE)
if (is.null(nested_identifiers)) {
nested_identifiers <- get_nested_identifiers(df_)
}
if (is(df_, "data.table")) {
df_ <- S4Vectors::DataFrame(df_)
}
nested_keys <- c(nested_identifiers, nested_confounders)
identifiers <- gDRutils::get_env_identifiers()
Keys <- identify_keys(df_, nested_keys, override_untrt_controls, identifiers)
if (!(identifiers$masked_tag %in% colnames(df_))) {
df_[, identifiers$masked_tag] <- FALSE
}
# Remove background value from readout (at least 1e-10 to avoid artefactual normalized values).
df_$CorrectedReadout <- pmax(df_$ReadoutValue - df_$BackgroundValue, 1e-10)
df_$ReadoutValue
data <- "finalSE_small.RDS"
original <- get_synthetic_data(data)
df_layout <- merge(cell_lines[2:11, ], drugs[2:11, ], by = NULL)
df_layout <- gDRtestData::add_data_replicates(df_layout)
df_layout <- gDRtestData::add_concentration(df_layout)
data <- "finalSE_small.RDS"
original <- get_synthetic_data(data)
df_layout <- merge(cell_lines[2:11, ], drugs[2:11, ], by = NULL)
n <- 64
md_df <- data.frame(
Gnumber = rep(c("vehicle", "untreated", paste0("G", seq(2))), each = 16),
DrugName = rep(c("vehicle", "untreated", paste0("GN", seq(2))), each = 16),
clid = paste0("C", rep_len(seq(4), n)),
CellLineName = paste0("N", rep_len(seq(4), n)),
replicates = rep_len(paste0("R", rep(seq(4), each = 4)), 64),
drug_moa = "inhibitor",
ReferenceDivisionTime = rep_len(c(120, 60), n),
Tissue = "Lung",
parental_identifier = "CL12345",
Duration = 160
)
data_df <- data.frame(
Concentration = rep(c(0, 0, 1, 3), each = 16),
ReadoutValue = runif(n, 1000, 5000),
BackgroundValue = runif(n, 0, 1),
WellRow = rep_len(LETTERS[1:8], n),
WellColumn = rep_len(seq(3), n),
experimenter = "Bob Ross"
)
test_df <- cbind(md_df, data_df)
cell_lines <- gDRtestData::create_synthetic_cell_lines()
drugs <-  gDRtestData::create_synthetic_drugs()
df_layout <- merge(cell_lines[2:11, ], drugs[2:11, ], by = NULL)
df_layout <- gDRtestData::add_data_replicates(df_layout)
df_layout <- gDRtestData::add_concentration(df_layout)
df_merged_data <- gDRtestData::generate_response_data(df_layout)
df_ = df_merged_data
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
se
nested_identifiers
nested_identifiers = NULL
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
se
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
nested_identifiers
# Assertions:
stopifnot(any(inherits(df_, "data.frame"), inherits(df_, "DataFrame")))
checkmate::assert_string(readout)
checkmate::assert_character(nested_identifiers, null.ok = TRUE)
checkmate::assert_character(nested_confounders, null.ok = TRUE)
nested_identifiers
get_nested_identifiers(df_)
checkmate::assert_data_frame(df_)
data_type <- data_model(df_)
data_type
if (data_type == "single_agent") {
gDRutils::get_env_identifiers("concentration")
} else {
unlist(gDRutils::get_env_identifiers(c("concentration", "concentration2"),
simplify = FALSE))
}
#' Get default nested identifiers
#'
#' @param df_ data.frame of raw drug response data containing both treated and untreated values.
#'
#' @return vector of nested identifiers
#' @export
get_nested_identifiers <- function(df_) {
checkmate::assert_data_frame(df_)
data_type <- data_model(df_)
if (data_type == "single-agent") {
gDRutils::get_env_identifiers("concentration")
} else {
unlist(gDRutils::get_env_identifiers(c("concentration", "concentration2"),
simplify = FALSE))
}
}
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
data_type <- data_model(df_)
if (data_type == "single-agent") {
gDRutils::get_env_identifiers("concentration")
} else {
unlist(gDRutils::get_env_identifiers(c("concentration", "concentration2"),
simplify = FALSE))
}
nested_identifiers
nested_identifiers
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
devtools::document()
se <- create_SE(df_ = df_,
readout = readout,
control_mean_fxn = control_mean_fxn,
nested_identifiers = nested_identifiers,
nested_confounders = nested_confounders,
override_untrt_controls = override_untrt_controls)
se
se
assay(se, Controls)
assay(se, "Controls")
assay(se, "RawTreated")
devtools::document()
